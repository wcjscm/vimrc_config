"sudo apt-get install vim vim-addon-manager vim-scripts vim-doc ctags cscope
"vim-addons status
"vim-addons install taglist supertab winmanager tags minibufexplorer
"mkdir -p ~/.vim/autoload ~/.vim/bundle
"cd ~/.vim/bundle
"git clone git://github.com/tpope/vim-sensible.git
"git clone https://github.com/scrooloose/nerdtree.git
"curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
"-------------------------------------------------------------------------------------
"https://github.com/amix/vimrc
"http://amix.dk/vim/vimrc.html
"帮助文档中文速查:
"http://vimcdoc.sourceforge.net/
"-------------------------------------------------------------------------------------

"判定当前操作系统类型
if(has("win32") || has("win64") || has("win16"))
    let g:iswindows=1
else
    let g:iswindows=0
endif

" 键      ｜含义
" <k0-k9>   小键盘0-9
" <S-x>     Shift + x键
" <C-x>     Ctrl + x键
" <M-x>     Alt + x键 或 meta + x键
" <A-x>     Alt + x键

"color evening
"color koehler
"colorscheme koehler
color evening
colors murphy

set incsearch               " 输入搜索内容时就显示搜索结果
set hlsearch                " 搜索时高亮显示被找到的文本
set selection=exclusive
set selectmode=mouse,key
set linespace=0   " 字符间插入的像素行数目
set gdefault "行内替换
set syntax=on " 语法高亮
set autoindent " 自动缩进
set iskeyword+=_,$,@,%,#,-    " 带有如下符号的单词不要被换行分割
set bs=indent,eol,start   " allow backspacing over everything in insert mode
set nocompatible "Get out of VI's compatible mode..
set background=dark
set history=400 "Sets how many lines of history VIM har to remember
set softtabstop=4 
set shiftwidth=4
set ts=4
set sw=4
set smartindent "启用智能对齐方式
set autoread "Set to auto read when a file is changed from the outside
set mouse=a "Have the mouse enabled all the time:
set tags=tags;
set clipboard+=unnamed "与windows共享剪贴板
set noerrorbells " No annoying sound on errors
set novisualbell
set t_vb=
filetype on "Enable filetype plugin
filetype plugin on
filetype indent on

set so=5  "Set 5 lines to the curors - when moving vertical..
set wildmenu "增强模式中的命令行自动完成操作
set ruler "Always show current position
set cmdheight=1 "The commandbar is 2 high
set nu "Show line number
set lazyredraw " Don't redraw while executing macros (good performance config)
set backspace=eol,start,indent "Set backspace
set whichwrap+=<,>,h,l "Bbackspace and cursor keys wrap to
set ignorecase "Ignore case when searching
set magic "Set magic on
set showmatch "show matching bracets
set mat=2 "How many tenths of a second to blink
set showcmd         " 输入的命令显示出来，看的清楚些 
set clipboard=unnamed "直接通过y,p和系统选择缓冲区进行数据交换

set nobackup "Turn backup off
set nowb
set noswapfile
set noexpandtab " 不要用空格代替制表符
set smarttab
set lbr "整词折行（lbr即linebreak）
set tw=500
set nofen "Enable folding, I find it very useful
set fdl=0
set ai "Auto indent
set si "Smart indet
set cindent "C-style indeting
set wrap "Wrap lines
let mapleader = ","
let g:mapleader = ","

"Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

nmap <leader>w :w!<cr> "Fast saving
nmap <leader>f :find<cr>
map <leader>f :FirstExplorerWindow<cr>
map <leader>b :BottomExplorerWindow<cr>
"map <F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"map <F11> :!./mk_tags<CR>
"Remove indenting on empty lines,清除行尾空格,压缩多行空行为一行 
map <F2> :%s/\s*$//g<cr>:noh<cr>'':%s/^\n\+/\r/<cr>:%s/\s\+$//g<cr>:noh<cr>
set laststatus=2 "显示状态栏(默认值为1, 只有一个窗口中显示多个文件时才显示状态栏)
set statusline=[%F]%m\ [pos:%l,%c%V]\ [%p%%\ of\ %L\ lines]
highlight VertSplit term=bold cterm=bold gui=bold
highlight StatusLine term=bold,underline cterm=underline,bold gui=bold, ctermfg=yellow guifg=SlateBlue guibg=Yellow 
highlight StatusLineNC term=bold,underline cterm=underline,bold gui=bold, ctermfg=yellow guifg=Gray guibg=White 
set cinoptions=s,e0,n0,f0,{0,}0,^0,:s,=s,l0,b0,gs,hs,ps,ts,is,+s,c3,C0,/0,(2s,us,U0,w0,W0,m0,j0,)20,*30

"NERDTree plugin
let NERDTreeHighlightCursorline = 0
let NERDTreeDirArrows = 0
let NERDTreeWinPos = "left" "where NERD tree window is placed on the screen
let NERDTreeWinSize = 25 "size of the NERD tree
let NERDTreeMouseMode = 1 "指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）
let NERDShutUp=1 "NERD_commenter plugin
"map <F4> :WMToggle<cr>
map <F4> :NERDTreeToggle<CR>
map <leader>nb :NERDTreeFromBookmark 
map <leader>nf :NERDTreeFind<cr>

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if(g:iswindows==1)
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set font according to system
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("mac") || has("macunix")
    set gfn=Source\ Code\ Pro:h15,Menlo:h15
elseif (g:iswindows==1)
    set gfn=Source\ Code\ Pro:h18,Bitstream\ Vera\ Sans\ Mono:h15,Consolas:h14
elseif has("linux")
    set gfn=Source\ Code\ Pro:h18,Bitstream\ Vera\ Sans\ Mono:h15
elseif has("unix")
    set gfn=Monospace\ 18
endif

map <leader>$ :syntax sync fromstart<cr>
autocmd BufEnter * :syntax sync fromstart 

" => vim-multiple-cursors
let g:multi_cursor_next_key="\<C-s>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fileformats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ffs=unix,dos,mac "Favorite filetypes
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 

"Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

map <leader>j :tabprevious<cr>
map <leader>l :tabnext<cr>
let g:bufExplorerMaxHeight=25
let g:explHideFiles='*.o, *.a'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"My information
iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
iab xname Amir Salihefendic

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map 0 ^ "用0来替换^号,使跳到行首使用0命令

"译注:普通模式下,<M-j>调整当前行往下一行,<M-k>调整当前行往上一行
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
"译注:可视模式下,<M-j>调整当前行往下一行,<M-k>调整当前行往上一行
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
"译注:为Python格式最后一个单词尾清理空白字符,ge,向后直到单词尾

set completeopt=menu "使用弹出菜单来显示可能的补全,命令行下<C-i>弹出

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-line config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Cwd()
  let cwd = getcwd()
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
    let g:cmd = getcmdline()
    if(g:iswindows==1)
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
    else
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
    endif

    if g:cmd == g:cmd_edited
        if(g:iswindows==1)
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
        else
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
        endif
    endif   

    return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
    return a:cmd . " " . expand("%:p:h") . "/"
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
" it deletes everything until the last slash 
cno $q <C-\>eDeleteTillSlash()<cr>
cno $tc <C-\>eCurrentFileDir("tabnew")<cr>
cno $th tabnew ~/
cno $td tabnew ~/Desktop/

" Bash like keys for the command line
cnoremap <C-A>    <Home>
cnoremap <C-E>    <End>
cnoremap <C-K>    <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Map ½ to something useful
map ½ $
cmap ½ $
imap ½ $

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" When you press gv you Ack after the selected text
vnoremap <silent> gv :call VisualSelection('gv', '')<CR>
" Open Ack and put the cursor in the right position
map <leader>g :Ack 

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffer realted
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Fast open a buffer by search for a name
map <c-q> :sb 

"Open a dummy buffer for paste
map <leader>q :e ~/buffer<cr>

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Buffer - reverse everything ... :)
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()

function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""
" => Vim Grep
""""""""""""""""""""""""""""""
let Grep_Cygwin_Find = 1
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
if(g:iswindows==1)
  set grepprg=/bin/grep\ -nH
else

endif

map <leader>y :YRShow<cr>  " => Yank Ring
""""""""""""""""""""""""""""""
" => File explorer
""""""""""""""""""""""""""""""
"Split vertically
let g:explVertical=1

"Window size
let g:explWinSize=35
let g:explSplitLeft=1
let g:explSplitBelow=1

"Hide some files
let g:explHideFiles='^\.,.*\.class$,.*\.swp$,.*\.pyc$,.*\.swo$,\.DS_Store$'

"Hide the help thing..
let g:explDetailedHelp=0

""""""""""""""""""""""""""""""
" => Minibuffer
""""""""""""""""""""""""""""""
let g:miniBufExplSplitToedge = 1
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMapCTagSwitchBufs = 1
let g:miniBufExplorerMoreThanOne = 2
let g:miniBufExplMoreThanOne = 0
let g:miniBufExplModSelTarget = 1
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplVSplit = 25
let g:miniBufExplSplitBelow = 1
let g:miniBufExplForceSyntaxEnable = 1  
let g:bufExplorerSortBy = "number"
autocmd BufRead,BufNew :call UMiniBufExplorer

""""""""""""""""""""""""""""""
" => Tag list (ctags) - not used
""""""""""""""""""""""""""""""
if(g:iswindows==1)
  let Tlist_Ctags_Cmd = 'ctags'
else              "设定linux系统中ctags程序的位置
  let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif

let Tlist_Sort_Type = "name"
let g:Tlist_Enable_Fold_Column = 1
let Tlist_Show_One_File = 1 "taglist插件只显示当前文件的tag
let Tlist_Use_Right_Window = 1 "让taglist窗口显示在右边，默认在左边
let Tlist_Exit_OnlyWindow = 1 "退出vim时候退出taglist
let Tlist_Use_SingleClick = 2 "双击tag跳动
let Tlist_Auto_Open = 0 "不自动打开Tlist窗口
let Tlist_WinWidth = 25 "默认宽度
let g:bufExploreMaxHeight = 30
let g:winManagerWindowLayout="BuffExplorer|TagList"

autocmd BufNewFile,BufRead *.todo so ~/vim_local/syntax/amido.vim
autocmd FileType c map <buffer> <leader><space> :w<cr>:!gcc %<cr>  " => C mappings
map <F6> :new<CR>:read !svn diff<CR>:set syntax=diff buftype=nofile<CR>gg
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap fd :cs find d <C-R>=expand("<cword>")<CR><CR>

if(g:iswindows==1)
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  behave mswin
  "编码 encoding fileencoding fileencodings termencoding
  "自动识别编码列表 fileencodings
  "set fencs=ucs-bom,gb18030,gbk,gb2312,big5,utf-8,euc-jp,euc-kr,latin1,cp936
  set fencs=ucs-bom,utf-8,gbk,big5,latin1
  set fenc=UTF-8          "文件编码
  set tenc=UTF-8          "终端编码，Windows下，带GUI的GVIM无效
  set encoding=utf-8      "内部编码
  let &termencoding=&encoding

  "菜单和系统提示
  set langmenu=UTF-8
  language message UTF-8
  let $LANG='zh_CN.UTF-8'
  source $VIMRUNTIME/delmenu.vim
  source $VIMRUNTIME/menu.vim
  "以上两行source部分放在set encoding=utf-8后面，否则菜单乱码

  " fileformat
  set ff=unix
  set ffs=unix,dos    "设置文件类型
  colorscheme koehler
  
  winpos 200 50  "设置窗口位置
  set lines=40 columns=120 "设置启动非最大化情况下的大小
  "au GUIEnter * simalt ~x "启动最大化
  set helplang=cn "设置帮助信息
  "lcd d:\ 自动切换目录
  "因为syntax on会影响到高亮设置，所以放在最后
  hi User1 guifg=red guibg=white
  hi User2 guifg=brown guibg=white
  set guioptions-=T           " 隐藏工具栏
  "set guioptions-=m           " 隐藏菜单栏
else
  execute pathogen#infect()
endif

"加载索引文件
function! LoadCscope()
  if has("cscope")    
    if(g:iswindows==1)
      set csprg=C:\Applications\Vim\vim74\cscope.exe
    else
      set csprg=/usr/bin/cscope
    endif
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
      if(g:iswindows==1)
        execute "cs add cscope.out"
      else
        cs add cscope.out
      end
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
  endif
endfunction
call LoadCscope()

function! DeleteFile(fileName)
  if filereadable(a:fileName)
    if(g:iswindows==1)
        let csoutdeleted=delete(getcwd()."\\".a:fileName)
    else
        let csoutdeleted=delete("./".a:fileName)
    endif
    if(csoutdeleted!=0)
        echohl WarningMsg | echo "Fail to do cscope! I cannot delete the ".a:fileName | echohl None
    endif
  endif
endfunction

function! FindDel(fileName)
  silent! execute "!find . -name \"".a:fileName."\" -exec rm {} \\;"
endfunction

"重新生成并加载索引文件
function! MakeTags()
  call DeleteFile("cscope.files")
  call DeleteFile("cscope.out")
  call DeleteFile("tags")
  if has("cscope")
    silent! execute "cs kill -1"
  endif

  if(g:iswindows==1)
    silent! execute "!dir /b /s *.c,*.cpp,*.h,*.java,*.lua,*.hpp,*.m,*.mm,*.txt,*.mk > cscope.files"
  else
    silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.[e|h]rl' -o -name '*.cpp' -o -name '*.java' -o -name '*.lua' -o -name '*.hpp' -o -name '*.m' -o -name '*.mm' -o -name '*.txt' -o -name '*.mk' | sed \'s/\\.//\' | awk \'{\"pwd\"|getline dir} {print dir$0}\' > cscope.files"
  endif
  silent! execute "!cscope -Rbq"
  silent! execute "!ctags -R *"

  call LoadCscope()
endfunction
"map <F11> :call MakeTags() <CR>

func! RunTest()
    exec "w"
    if &filetype == 'c'
      exec "!g++ % -o %<"
      exec "! ./%<"
    elseif &filetype == 'cpp'
      exec "!g++ % -o %<"
      exec "! ./%<"
    elseif &filetype == 'java' 
      exec "!javac %" 
      exec "!java %<"
    elseif &filetype == 'sh'
      :!./%
    elseif &filetye == 'lua'
      exec "!lua %<"
    else
      echohl WarningMsg | echo "unknow filetype, RunTest %" | echohl None
    endif
endfunc

"C,C++的调试
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb ./%<"
endfunc

"定义函数SetTitle，自动插入文件头 
func SetTitle() 
    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#########################################################################") 
        call append(line("."), "\# file: ".expand("%")) 
        call append(line(".")+1, "\# description: ") 
        call append(line(".")+2, "\# author: wcjscm") 
        call append(line(".")+3, "\# email: wcjscm@gmail.com") 
        call append(line(".")+4, "\# date: ".strftime("%c")) 
        call append(line(".")+5, "\#########################################################################") 
        call append(line(".")+6, "\#!/bin/bash") 
        call append(line(".")+7, "")
    elseif &filetype == 'lua'
        call setline(1,"-----------------------------------------------------------------------") 
        call append(line("."), "-- file: ".expand("%")) 
        call append(line(".")+1, "-- description:") 
        call append(line(".")+2, "-- author: wcjscm") 
        call append(line(".")+3, "-- email: wcjscm@gmail.com") 
        call append(line(".")+4, "-- date: ".strftime("%c")) 
        call append(line(".")+5, "-----------------------------------------------------------------------") 
        call append(line(".")+6, "")
    else 
        call setline(1, "/*************************************************************************") 
        call append(line("."), "* file: ".expand("%")) 
        call append(line(".")+1, "* description:") 
        call append(line(".")+2, "* author: wcjscm") 
        call append(line(".")+3, "* email: wcjscm@gmail.com") 
        call append(line(".")+4, "* date: ".strftime("%c")) 
        call append(line(".")+5, " ************************************************************************/") 
        call append(line(".")+6, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+7, "#include<iostream>")
        call append(line(".")+8, "using namespace std;")
        call append(line(".")+9, "")
    endif
    if &filetype == 'c'
        call append(line(".")+7, "#include<stdio.h>")
        call append(line(".")+8, "")
    endif    
    autocmd BufNewFile * normal G "新建文件后，自动定位到文件末尾
endfunc

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
